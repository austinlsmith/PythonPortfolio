#datasets create from SQL query

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

data = datasets[0]
data = data.fillna('')
data.head()

#What Event occured the most on Yammer? 
data['Event Name'].value_counts()[:5].plot(kind='bar')

#what Locations are using Samsung most 
event_index = data['Device'].str.contains('SAMSUNG')
event_searches = data[event_index]
event_searches['Location'].value_counts()[:10]

#count Device values
devices = data['Device']
devices.value_counts()

#create list for categorizing devices
Apple = ['MACBOOK PRO', 'MACBOOK AIR', 'IPHONE 5', 'IPHONE 5S', 'IPAD AIR', 'MAC MINI', 'IPHONE 4S']
Samsung = ['SAMSUNG GALAXY S4', 'SAMSUNG GALAXY NOTE', 'SAMSUNG GALAXY TABLET']
Nexus = ['NEXUS 5', 'NEXUS 10', 'NEXUS 7']

#function to return Device category
def operating_system(platform):
    if platform in Apple:
        return 'Apple'
    if platform in Samsung:
        return 'Samsung'
    if platform in Nexus:
        return 'Nexus'
    else:
        return 'Other'

#bar graph of frequency of operating_system 
data['Device'].apply(operating_system)
data['Device_Type'] = data['Device'].apply(operating_system)
data[['Device_Type','Device']]
data['Device_Type'].value_counts().plot(kind='bar')

#list to categorize countries into regions
North_America = ['United States', 'Mexico', 'Canada']
Australia = ['Australia']
Europe = ['Germany', 'United Kingdom', 'Ireland', 'Spain', 'France', 'Norway', 'Denmark', 'Isreal', 'Greece', 'Sweeden', 'Belgium', 'Netherlands','Portugal', 'Finalnd', 'Switzerland']
South_America = ['Brazil', 'Chile', 'Columbia', 'Venezuela', 'Argentina']
Asia = ['Japan', 'Phillipines', 'Indonesia', 'China', 'Taiwan', 'Korea', 'Malaysia', 'Singapore', 'Hong Kong', 'Thailand']
Middle_East = ['Iraq', 'Turkey', 'Pakistan', 'India', 'Iran', 'United Arab Emirates', 'Saudi Arabia']
Africa = ['Nigeria', 'South Africa', 'Egypt']

#function to return Region
def region(country):
    if country in North_America:
        return 'North America'
    if country in Europe:
        return 'Europe'
    if country in South_America:
        return 'South America'
    if country in Asia:
      return 'Asia'
    if country in Africa:
      return 'Africa'
    if country in Middle_East:
      return 'Middle East'
    else:
        return 'Australia'

#count Region values after they are in categories
data['Location'].apply(region)
data['Region'] = data['Location'].apply(region)
data[['Location','Region']]
count = data['Region'].value_counts().plot(kind='bar')

#grouping to prepare data for Histogram - group by Region 
x_var = 'Device'
groupby_var = 'Region'
df_agg = data.loc[:, [x_var, groupby_var]].groupby(groupby_var)
vals = [data[x_var].values.tolist() for i, df in df_agg]

#adding features to Histogram
plt.figure(figsize=(16,9), dpi= 80)
colors = [plt.cm.Spectral(i/float(len(vals)-1)) for i in range(len(vals))]
n, bins, patches = plt.hist(vals, data[x_var].unique().__len__(), stacked=True, density=False, color=colors[:len(vals)])

#plot Histogram
plt.title(f"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$", fontsize=22)
plt.xlabel(x_var)
plt.ylabel("Frequency")
plt.xticks(rotation=-45)
plt.show()

#Rotate Axis titles
sns.countplot(x='Region', data=data)
plt.xticks(rotation=-45)

#define lambda function to define logins and searches
def is_view(x):
  return x == 'view'
def is_like(x):
  return x == 'like'
def is_search(x):
  return x == 'search'

data['views'] = data['Event Name'].apply(lambda x: x == 'view')
data['likes'] = data['Event Name'].apply(lambda x: x == 'like')
data['searches'] = data['Event Name'].apply(lambda x: x == 'search')

#count of views values
data['views'].value_counts()

# percent of views to total actions
not_a_view = data['views'].value_counts()[0]
views = data['views'].value_counts()[1]
total_actions_views = not_a_view + views
print ( float(not_a_view) / total_actions_views)

data['likes'].value_counts()

# percent of likes to total actions
not_a_like = data['likes'].value_counts()[0]
likes = data['likes'].value_counts()[1]
total_actions_likes = not_a_like + likes
print (float(likes) / total_actions_likes)

data['searches'].value_counts()

# percent of searches to total actions
not_a_search = data['searches'].value_counts()[0]
search = data['searches'].value_counts()[1]
total_actions_searches = not_a_search + search
print (float(search) / total_actions_searches)
